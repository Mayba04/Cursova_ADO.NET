// <auto-generated />
using System;
using Bookstore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bookstore.Migrations
{
    [DbContext(typeof(BookstoreDBContext))]
    partial class BookstoreDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bookstore.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Administrators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "pashamyba7@gmail.com",
                            Login = "Admin",
                            Name = "Pavlo",
                            Password = "Admin123"
                        });
                });

            modelBuilder.Entity("Bookstore.Entities.Authors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "J.K.",
                            Surname = "Rowling"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Stephen",
                            Surname = "King"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dan",
                            Surname = "Brown"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Agatha",
                            Surname = "Christie"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Jane",
                            Surname = "Austen"
                        },
                        new
                        {
                            Id = 6,
                            Name = "J.R.R.",
                            Surname = "Tolkien"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Isaac",
                            Surname = "Asimov"
                        });
                });

            modelBuilder.Entity("Bookstore.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreId = 1,
                            Price = 12.99m,
                            Publisher = "Scribner",
                            Quantity = 20,
                            Title = "The Great Gatsby",
                            Year = 1925
                        },
                        new
                        {
                            Id = 2,
                            GenreId = 1,
                            Price = 10.99m,
                            Publisher = "Bloomsbury",
                            Quantity = 19,
                            Title = "Harry Potter and the Philosopher's Stone",
                            Year = 1997
                        },
                        new
                        {
                            Id = 3,
                            GenreId = 3,
                            Price = 19.99m,
                            Publisher = "Doubleday",
                            Quantity = 18,
                            Title = "The Da Vinci Code",
                            Year = 2003
                        },
                        new
                        {
                            Id = 4,
                            GenreId = 3,
                            Price = 8.99m,
                            Publisher = "Collins Crime Club",
                            Quantity = 15,
                            Title = "Murder on the Orient Express",
                            Year = 1934
                        },
                        new
                        {
                            Id = 5,
                            GenreId = 4,
                            Price = 6.99m,
                            Publisher = "T. Egerton, Whitehall",
                            Quantity = 10,
                            Title = "Pride and Prejudice",
                            Year = 1813
                        },
                        new
                        {
                            Id = 6,
                            GenreId = 6,
                            Price = 15.99m,
                            Publisher = "Allen & Unwin",
                            Quantity = 13,
                            Title = "The Lord of the Rings",
                            Year = 1954
                        },
                        new
                        {
                            Id = 7,
                            GenreId = 5,
                            Price = 12.99m,
                            Publisher = "Gnome Press",
                            Quantity = 11,
                            Title = "Foundation",
                            Year = 1951
                        });
                });

            modelBuilder.Entity("Bookstore.Entities.BookAuthor", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            BookId = 1
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 2
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 3
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 4
                        },
                        new
                        {
                            AuthorId = 1,
                            BookId = 5
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 5
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 6
                        });
                });

            modelBuilder.Entity("Bookstore.Entities.Client", b =>
                {
                    b.Property<int>("CredentialsId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CredentialsId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            CredentialsId = 1,
                            Email = "john.doe@example.com",
                            Name = "John Doe"
                        },
                        new
                        {
                            CredentialsId = 2,
                            Email = "jane.smith@example.com",
                            Name = "Jane Smith"
                        });
                });

            modelBuilder.Entity("Bookstore.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ClientId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            ClientId = 1,
                            CreatedAt = new DateTime(2023, 5, 29, 14, 19, 5, 835, DateTimeKind.Local).AddTicks(7197),
                            Text = "Very cool book"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            ClientId = 2,
                            CreatedAt = new DateTime(2023, 5, 29, 14, 19, 5, 835, DateTimeKind.Local).AddTicks(7416),
                            Text = "I advise you to read it"
                        });
                });

            modelBuilder.Entity("Bookstore.Entities.Credentials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Credentials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "user1",
                            Password = "password1"
                        },
                        new
                        {
                            Id = 2,
                            Login = "user2",
                            Password = "password2"
                        });
                });

            modelBuilder.Entity("Bookstore.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Non-fiction"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Epos"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Fantasy"
                        });
                });

            modelBuilder.Entity("Bookstore.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Payment_status")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Date = new DateTime(2023, 5, 29, 14, 19, 5, 833, DateTimeKind.Local).AddTicks(5887),
                            Payment_status = false,
                            Price = 15.99m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            Date = new DateTime(2023, 5, 29, 14, 19, 5, 835, DateTimeKind.Local).AddTicks(3152),
                            Payment_status = false,
                            Price = 10.99m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 2,
                            Date = new DateTime(2023, 5, 29, 14, 19, 5, 835, DateTimeKind.Local).AddTicks(3170),
                            Payment_status = false,
                            Price = 19.99m,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Bookstore.Entities.OrderBook", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("OrderBooks");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            BookId = 6
                        },
                        new
                        {
                            OrderId = 2,
                            BookId = 2
                        },
                        new
                        {
                            OrderId = 2,
                            BookId = 3
                        });
                });

            modelBuilder.Entity("Bookstore.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            ImageData = new byte[] { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 1, 15, 0, 0, 0, 186, 8, 3, 0, 0, 0, 135, 129, 56, 126, 0, 0, 0, 243, 80, 76, 84, 69, 255, 255, 255, 202, 82, 31, 226, 227, 228, 213, 129, 76, 202, 83, 32, 213, 127, 74, 202, 81, 28, 203, 86, 35, 202, 80, 29, 226, 230, 232, 201, 79, 24, 204, 90, 39, 212, 124, 71, 254, 251, 249, 205, 97, 46, 207, 105, 54, 226, 233, 236, 252, 244, 240, 211, 120, 65, 206, 100, 49, 210, 115, 63, 239, 206, 191, 203, 85, 29, 249, 235, 228, 201, 69, 0, 209, 111, 59, 204, 93, 42, 201, 76, 21, 208, 106, 59, 204, 90, 35, 246, 227, 218, 220, 148, 115, 224, 159, 130, 232, 184, 162, 199, 61, 0, 203, 76, 0, 222, 214, 211, 215, 130, 89, 235, 194, 175, 250, 239, 233, 244, 220, 208, 241, 212, 199, 218, 139, 104, 211, 116, 72, 228, 172, 147, 237, 201, 185, 216, 131, 92, 213, 122, 80, 218, 182, 166, 226, 166, 140, 213, 149, 123, 216, 171, 153, 242, 242, 243, 220, 196, 185, 212, 141, 110, 210, 109, 51, 203, 81, 13, 206, 97, 56, 214, 156, 139, 220, 145, 109, 221, 205, 198, 209, 103, 44, 223, 220, 218, 218, 187, 176, 209, 120, 90, 211, 138, 116, 233, 231, 218, 226, 242, 247, 229, 218, 203, 210, 116, 55, 214, 172, 142, 207, 90, 18, 203, 88, 46, 212, 149, 130, 209, 100, 34, 210, 131, 106, 217, 180, 168, 209, 121, 91, 214, 167, 150, 227, 209, 196, 207, 103, 69, 83, 204, 131, 132, 0, 0, 15, 153, 73, 68, 65, 84, 120, 156, 237, 93, 121, 127, 218, 186, 22, 100, 9, 194, 8, 12, 102, 51, 6, 179, 25, 202, 106, 3, 129, 52, 193, 45, 73, 186, 228, 245, 182, 183, 183, 183, 175, 223, 255, 211, 60, 73, 222, 195, 98, 91, 44, 54, 206, 155, 191, 219, 252, 194, 100, 52, 154, 115, 142, 36, 98, 177, 240, 129, 29, 119, 154, 205, 233, 172, 22, 244, 239, 17, 18, 212, 186, 77, 16, 191, 1, 173, 197, 114, 194, 6, 253, 187, 4, 143, 90, 55, 15, 1, 19, 143, 199, 1, 132, 188, 172, 140, 223, 54, 37, 69, 69, 214, 216, 192, 96, 24, 192, 23, 58, 195, 81, 208, 191, 84, 96, 24, 41, 77, 8, 13, 54, 52, 74, 0, 68, 148, 76, 222, 36, 37, 236, 112, 192, 3, 7, 27, 6, 37, 217, 133, 52, 14, 250, 183, 187, 52, 138, 195, 197, 46, 54, 8, 144, 72, 26, 115, 169, 246, 134, 172, 132, 173, 78, 121, 0, 118, 179, 161, 137, 4, 240, 114, 183, 90, 12, 250, 247, 188, 12, 216, 201, 52, 123, 136, 13, 115, 221, 200, 203, 241, 27, 160, 100, 220, 105, 64, 55, 54, 180, 117, 3, 96, 99, 42, 181, 131, 254, 125, 207, 10, 182, 221, 45, 187, 106, 195, 97, 37, 205, 206, 44, 186, 251, 77, 109, 89, 128, 204, 30, 27, 221, 43, 18, 94, 94, 78, 34, 185, 110, 70, 75, 153, 247, 174, 13, 19, 200, 74, 242, 3, 169, 29, 181, 253, 102, 100, 15, 163, 62, 25, 97, 32, 108, 117, 134, 81, 42, 249, 138, 210, 128, 70, 27, 22, 0, 108, 201, 221, 168, 172, 155, 226, 112, 160, 66, 58, 109, 216, 25, 129, 60, 138, 174, 215, 191, 110, 80, 252, 106, 81, 174, 148, 87, 192, 37, 223, 230, 202, 75, 62, 28, 70, 143, 214, 134, 141, 17, 168, 150, 187, 213, 235, 165, 100, 220, 201, 159, 70, 27, 118, 74, 26, 3, 229, 42, 247, 27, 118, 220, 105, 249, 12, 28, 158, 24, 193, 251, 205, 96, 120, 117, 148, 212, 150, 77, 254, 228, 100, 24, 0, 104, 191, 153, 93, 19, 35, 181, 101, 254, 12, 218, 176, 17, 2, 161, 218, 236, 94, 75, 201, 199, 74, 139, 227, 2, 135, 23, 32, 43, 41, 79, 165, 43, 200, 105, 69, 169, 126, 124, 224, 240, 200, 136, 202, 79, 135, 33, 239, 30, 13, 231, 231, 215, 134, 69, 73, 60, 220, 211, 10, 18, 70, 47, 71, 7, 134, 54, 173, 104, 135, 210, 74, 38, 157, 19, 133, 81, 127, 64, 209, 181, 25, 190, 105, 5, 59, 217, 156, 48, 140, 250, 101, 4, 242, 229, 78, 168, 186, 174, 237, 110, 222, 71, 247, 235, 44, 148, 180, 230, 74, 72, 90, 140, 44, 98, 35, 40, 109, 88, 64, 86, 146, 15, 69, 116, 173, 41, 77, 218, 126, 207, 105, 129, 167, 21, 205, 238, 44, 216, 117, 51, 82, 154, 123, 7, 76, 151, 7, 94, 55, 65, 78, 43, 138, 210, 254, 113, 91, 48, 96, 2, 156, 86, 28, 26, 62, 6, 9, 60, 173, 216, 92, 124, 90, 193, 162, 48, 122, 225, 248, 229, 25, 12, 67, 166, 21, 23, 52, 87, 220, 11, 12, 126, 83, 57, 0, 148, 211, 242, 115, 229, 82, 245, 205, 164, 19, 90, 109, 152, 192, 221, 163, 242, 69, 14, 168, 141, 187, 167, 238, 5, 158, 11, 100, 58, 126, 230, 117, 211, 94, 158, 163, 23, 120, 46, 48, 120, 90, 113, 198, 3, 106, 53, 28, 56, 130, 254, 144, 254, 128, 75, 190, 233, 121, 74, 190, 154, 82, 128, 161, 182, 209, 221, 56, 211, 180, 162, 120, 137, 94, 224, 185, 128, 114, 218, 92, 57, 229, 1, 181, 226, 80, 190, 76, 47, 240, 76, 192, 251, 13, 63, 63, 217, 129, 129, 217, 180, 117, 181, 218, 176, 0, 120, 89, 57, 1, 25, 236, 108, 126, 213, 218, 176, 192, 64, 85, 58, 154, 142, 73, 167, 113, 37, 129, 195, 3, 224, 252, 184, 250, 151, 157, 116, 34, 162, 13, 13, 112, 112, 212, 62, 211, 94, 150, 207, 55, 124, 188, 60, 80, 165, 55, 60, 138, 141, 86, 56, 186, 95, 167, 1, 3, 90, 157, 35, 246, 220, 145, 68, 117, 18, 46, 180, 96, 96, 65, 162, 55, 143, 145, 84, 8, 101, 191, 135, 26, 32, 223, 165, 175, 118, 195, 218, 253, 162, 5, 202, 236, 50, 253, 57, 9, 204, 70, 148, 54, 21, 68, 71, 65, 161, 223, 87, 112, 24, 141, 146, 113, 160, 92, 58, 159, 208, 146, 129, 47, 34, 132, 190, 251, 229, 15, 176, 76, 239, 163, 147, 110, 43, 106, 108, 244, 31, 222, 209, 178, 49, 14, 120, 20, 123, 122, 0, 85, 190, 229, 50, 116, 108, 180, 149, 243, 158, 253, 10, 0, 34, 191, 122, 230, 18, 84, 124, 92, 97, 47, 208, 13, 12, 47, 63, 114, 153, 68, 226, 189, 127, 54, 70, 82, 72, 6, 211, 39, 132, 202, 223, 37, 184, 68, 130, 130, 15, 20, 56, 2, 57, 223, 115, 78, 0, 117, 78, 196, 225, 159, 15, 18, 191, 34, 182, 84, 226, 106, 243, 150, 35, 226, 240, 203, 7, 91, 157, 70, 168, 223, 163, 3, 242, 15, 207, 6, 27, 190, 248, 56, 237, 69, 132, 144, 128, 81, 229, 123, 125, 169, 248, 228, 99, 220, 41, 71, 143, 13, 200, 47, 109, 226, 240, 193, 199, 184, 27, 238, 49, 61, 21, 176, 143, 190, 100, 18, 254, 249, 136, 96, 224, 32, 199, 97, 238, 50, 14, 113, 120, 228, 163, 173, 68, 170, 23, 168, 3, 170, 15, 207, 47, 137, 215, 112, 231, 163, 24, 177, 94, 160, 6, 160, 62, 221, 114, 153, 45, 58, 92, 249, 24, 73, 229, 72, 13, 17, 116, 192, 214, 106, 107, 169, 120, 224, 131, 157, 13, 162, 48, 124, 220, 66, 191, 249, 184, 75, 28, 8, 135, 234, 185, 226, 76, 142, 94, 24, 69, 16, 27, 119, 220, 78, 113, 28, 230, 99, 178, 137, 94, 24, 141, 227, 166, 207, 116, 159, 56, 48, 246, 173, 148, 73, 200, 207, 5, 210, 66, 149, 111, 95, 246, 179, 145, 72, 236, 238, 172, 143, 187, 209, 11, 163, 113, 50, 180, 127, 120, 222, 183, 84, 246, 27, 106, 40, 46, 34, 156, 1, 224, 85, 177, 226, 141, 143, 208, 92, 68, 56, 49, 24, 241, 251, 71, 23, 113, 36, 182, 13, 181, 166, 212, 35, 215, 239, 33, 0, 252, 252, 144, 143, 238, 49, 144, 218, 96, 93, 169, 231, 211, 241, 168, 49, 194, 168, 249, 237, 98, 197, 125, 193, 176, 221, 74, 50, 153, 204, 97, 70, 34, 5, 200, 63, 188, 243, 34, 142, 215, 11, 166, 93, 73, 37, 147, 132, 145, 70, 132, 24, 1, 106, 229, 147, 71, 54, 18, 206, 4, 34, 33, 121, 164, 114, 57, 68, 74, 174, 16, 25, 141, 192, 236, 42, 225, 105, 169, 16, 112, 247, 182, 35, 202, 157, 82, 50, 89, 207, 214, 215, 120, 213, 148, 10, 141, 116, 4, 108, 4, 168, 11, 79, 62, 106, 174, 151, 119, 125, 217, 60, 143, 59, 200, 37, 115, 141, 222, 112, 60, 127, 66, 196, 164, 16, 35, 55, 65, 127, 156, 99, 1, 91, 119, 62, 196, 65, 4, 242, 69, 192, 175, 188, 145, 185, 182, 156, 75, 86, 210, 189, 175, 177, 88, 117, 254, 211, 96, 228, 154, 53, 2, 250, 200, 71, 125, 177, 129, 4, 242, 200, 224, 171, 203, 11, 165, 22, 139, 85, 82, 169, 194, 77, 15, 111, 193, 108, 117, 161, 105, 164, 124, 189, 26, 1, 120, 178, 226, 99, 169, 232, 120, 89, 9, 228, 178, 195, 188, 29, 171, 167, 82, 101, 70, 208, 35, 201, 208, 88, 53, 217, 235, 212, 136, 216, 242, 227, 163, 38, 184, 199, 207, 16, 255, 119, 0, 55, 136, 143, 92, 153, 233, 27, 238, 90, 28, 214, 159, 114, 104, 171, 169, 148, 175, 144, 17, 36, 14, 215, 98, 101, 23, 27, 220, 111, 32, 234, 63, 162, 128, 252, 35, 151, 7, 130, 21, 89, 89, 73, 198, 140, 164, 174, 143, 17, 255, 62, 138, 145, 225, 30, 255, 244, 244, 22, 24, 224, 55, 177, 5, 226, 131, 233, 217, 35, 252, 72, 121, 90, 227, 56, 82, 201, 103, 175, 40, 196, 251, 221, 100, 77, 58, 126, 51, 186, 56, 144, 127, 116, 71, 177, 121, 14, 173, 23, 188, 191, 216, 51, 252, 178, 137, 25, 33, 26, 9, 246, 83, 122, 134, 72, 229, 163, 200, 57, 202, 130, 46, 14, 134, 159, 87, 73, 30, 75, 149, 227, 189, 255, 188, 170, 121, 71, 157, 239, 223, 82, 90, 89, 115, 13, 135, 130, 96, 127, 234, 123, 147, 197, 108, 112, 31, 77, 113, 64, 190, 67, 66, 170, 82, 194, 251, 237, 246, 65, 246, 81, 119, 253, 45, 73, 156, 53, 29, 122, 31, 81, 23, 247, 219, 115, 38, 87, 100, 184, 251, 15, 61, 83, 28, 3, 253, 208, 229, 176, 130, 249, 248, 107, 139, 15, 84, 233, 77, 191, 151, 244, 66, 47, 204, 132, 48, 170, 186, 114, 111, 250, 236, 20, 135, 42, 106, 118, 128, 196, 97, 30, 215, 30, 87, 146, 245, 180, 240, 176, 131, 15, 196, 72, 231, 41, 244, 205, 0, 180, 236, 31, 169, 196, 241, 200, 11, 140, 241, 35, 6, 85, 243, 51, 215, 22, 169, 74, 90, 252, 188, 147, 143, 88, 108, 50, 192, 26, 73, 229, 194, 26, 226, 129, 168, 210, 108, 178, 72, 28, 43, 104, 57, 135, 253, 44, 127, 113, 154, 43, 101, 193, 143, 189, 207, 98, 76, 166, 79, 165, 208, 106, 4, 168, 254, 139, 149, 132, 230, 28, 214, 182, 98, 19, 71, 12, 247, 199, 74, 185, 6, 35, 254, 119, 31, 31, 49, 118, 38, 135, 180, 208, 3, 253, 50, 221, 38, 155, 249, 40, 152, 226, 104, 189, 190, 232, 49, 252, 150, 42, 223, 8, 183, 123, 249, 192, 255, 132, 20, 122, 201, 144, 53, 3, 32, 93, 177, 130, 196, 241, 163, 111, 6, 210, 69, 245, 245, 135, 29, 175, 147, 133, 180, 184, 219, 80, 13, 20, 37, 82, 214, 132, 169, 208, 3, 251, 39, 212, 46, 226, 248, 91, 221, 237, 28, 198, 122, 168, 164, 234, 89, 200, 187, 221, 135, 81, 228, 117, 46, 68, 13, 35, 216, 184, 203, 80, 176, 145, 225, 62, 153, 206, 1, 224, 98, 182, 235, 147, 110, 74, 165, 198, 118, 66, 221, 194, 72, 41, 60, 165, 66, 82, 232, 185, 76, 168, 247, 139, 35, 241, 183, 205, 57, 58, 187, 175, 136, 73, 149, 28, 74, 236, 30, 238, 106, 23, 81, 89, 147, 11, 65, 89, 3, 96, 243, 23, 13, 27, 120, 91, 177, 156, 67, 174, 238, 89, 18, 109, 156, 80, 197, 133, 59, 31, 248, 129, 219, 167, 117, 50, 232, 246, 8, 160, 203, 163, 14, 113, 160, 82, 118, 111, 194, 40, 110, 114, 149, 44, 195, 120, 187, 124, 90, 235, 148, 73, 161, 23, 152, 70, 188, 76, 168, 247, 137, 67, 176, 182, 149, 67, 55, 143, 209, 130, 201, 199, 133, 59, 79, 124, 224, 16, 255, 51, 184, 66, 143, 17, 91, 75, 154, 77, 22, 253, 159, 47, 7, 50, 135, 19, 227, 58, 89, 48, 158, 111, 92, 142, 167, 122, 89, 83, 190, 116, 100, 5, 223, 189, 77, 168, 183, 197, 241, 233, 143, 205, 57, 220, 46, 151, 206, 241, 130, 17, 92, 119, 24, 11, 147, 233, 79, 51, 196, 95, 80, 35, 98, 254, 118, 239, 49, 176, 131, 226, 120, 182, 57, 135, 139, 56, 48, 164, 58, 94, 48, 43, 239, 124, 196, 216, 201, 224, 226, 101, 13, 84, 61, 79, 168, 95, 137, 195, 230, 28, 64, 30, 186, 175, 131, 218, 34, 87, 79, 131, 172, 191, 75, 185, 179, 249, 207, 75, 50, 130, 124, 212, 199, 132, 218, 33, 142, 127, 4, 168, 253, 12, 79, 226, 136, 145, 154, 174, 212, 96, 14, 215, 48, 59, 254, 215, 80, 235, 196, 95, 162, 25, 128, 162, 245, 23, 42, 31, 205, 188, 124, 250, 99, 5, 210, 166, 7, 113, 96, 104, 142, 154, 247, 125, 49, 87, 90, 96, 70, 46, 112, 86, 66, 93, 188, 190, 150, 224, 85, 28, 95, 122, 198, 108, 5, 52, 246, 4, 210, 29, 127, 234, 105, 169, 146, 141, 251, 21, 72, 12, 127, 255, 102, 153, 116, 226, 207, 218, 12, 96, 32, 93, 211, 7, 137, 3, 57, 135, 249, 67, 202, 30, 197, 129, 81, 173, 231, 202, 55, 48, 77, 113, 173, 159, 85, 72, 136, 39, 103, 37, 206, 67, 7, 110, 250, 80, 116, 4, 137, 115, 244, 124, 58, 135, 249, 119, 198, 2, 97, 132, 165, 127, 62, 112, 39, 158, 204, 38, 206, 84, 232, 1, 53, 127, 235, 237, 24, 216, 46, 113, 24, 29, 82, 88, 144, 252, 61, 104, 49, 193, 69, 12, 211, 219, 223, 38, 59, 132, 226, 114, 141, 203, 26, 210, 30, 57, 49, 29, 148, 77, 31, 135, 56, 176, 115, 248, 85, 62, 75, 170, 126, 241, 3, 229, 67, 24, 237, 206, 119, 28, 226, 177, 70, 78, 25, 208, 64, 191, 112, 79, 211, 230, 192, 219, 138, 205, 57, 90, 67, 255, 79, 56, 180, 43, 185, 122, 22, 17, 66, 251, 22, 70, 173, 187, 174, 19, 70, 78, 168, 17, 152, 255, 77, 181, 84, 18, 220, 59, 106, 231, 48, 161, 160, 61, 55, 205, 136, 80, 161, 184, 208, 78, 48, 54, 230, 87, 229, 211, 132, 120, 208, 167, 154, 80, 35, 56, 196, 225, 215, 57, 12, 176, 157, 82, 10, 143, 226, 4, 225, 142, 246, 129, 144, 241, 3, 41, 244, 78, 227, 172, 144, 110, 66, 141, 157, 227, 95, 75, 28, 222, 51, 199, 22, 218, 114, 9, 237, 154, 217, 56, 20, 254, 220, 83, 254, 8, 182, 58, 48, 67, 252, 113, 115, 112, 72, 113, 12, 140, 32, 243, 242, 203, 145, 57, 142, 120, 129, 111, 188, 40, 105, 142, 40, 246, 154, 116, 27, 77, 12, 151, 53, 79, 165, 163, 155, 1, 64, 93, 80, 53, 125, 136, 115, 8, 230, 182, 146, 237, 28, 247, 250, 252, 68, 174, 164, 240, 57, 24, 100, 35, 253, 135, 175, 238, 255, 126, 39, 80, 89, 243, 51, 119, 148, 70, 24, 149, 167, 235, 8, 226, 109, 37, 125, 188, 115, 88, 168, 117, 43, 37, 237, 147, 128, 190, 184, 162, 126, 132, 74, 90, 172, 115, 244, 165, 47, 224, 105, 125, 148, 123, 254, 108, 137, 163, 117, 164, 56, 8, 216, 234, 20, 127, 20, 82, 142, 244, 26, 119, 180, 252, 226, 249, 21, 142, 172, 20, 103, 37, 24, 245, 59, 93, 177, 146, 224, 184, 95, 63, 12, 113, 160, 82, 246, 136, 231, 247, 28, 140, 12, 231, 21, 194, 72, 246, 6, 10, 31, 168, 159, 109, 51, 203, 26, 159, 165, 47, 164, 155, 80, 39, 94, 59, 199, 230, 116, 223, 91, 49, 82, 176, 141, 144, 77, 83, 236, 125, 166, 54, 86, 253, 88, 94, 202, 207, 161, 120, 198, 254, 80, 137, 47, 100, 184, 95, 105, 75, 28, 71, 109, 43, 219, 192, 54, 146, 210, 150, 191, 40, 78, 169, 153, 30, 117, 201, 108, 34, 229, 185, 244, 165, 46, 86, 144, 56, 254, 181, 196, 193, 159, 194, 57, 156, 24, 111, 234, 134, 177, 10, 125, 122, 99, 109, 119, 127, 174, 141, 16, 239, 170, 17, 218, 201, 10, 113, 142, 27, 187, 115, 156, 225, 201, 125, 148, 172, 234, 134, 177, 10, 63, 232, 31, 158, 110, 119, 158, 180, 102, 128, 235, 28, 28, 54, 40, 125, 20, 7, 82, 219, 182, 50, 63, 211, 55, 222, 20, 135, 139, 111, 41, 237, 79, 11, 123, 205, 91, 106, 206, 39, 218, 252, 202, 69, 35, 200, 71, 233, 58, 130, 216, 57, 226, 166, 56, 128, 159, 38, 152, 95, 212, 20, 108, 35, 154, 177, 10, 244, 198, 202, 78, 180, 200, 122, 96, 14, 142, 28, 144, 210, 71, 157, 219, 10, 63, 61, 229, 51, 251, 219, 104, 107, 249, 172, 130, 141, 181, 247, 64, 205, 72, 108, 166, 205, 175, 246, 21, 122, 144, 114, 66, 141, 79, 183, 252, 82, 173, 64, 122, 22, 231, 112, 0, 253, 109, 177, 141, 224, 145, 66, 92, 16, 151, 212, 187, 24, 59, 211, 142, 92, 225, 57, 248, 182, 143, 54, 233, 38, 43, 196, 57, 68, 75, 28, 243, 243, 138, 195, 248, 36, 166, 177, 130, 158, 112, 71, 255, 144, 236, 208, 98, 196, 177, 106, 196, 198, 71, 186, 166, 15, 190, 168, 33, 94, 82, 28, 58, 106, 74, 93, 207, 103, 184, 21, 176, 243, 136, 145, 39, 20, 165, 194, 147, 89, 232, 89, 226, 144, 41, 139, 149, 196, 203, 59, 219, 224, 237, 50, 226, 208, 129, 141, 85, 111, 142, 194, 35, 90, 1, 248, 110, 205, 171, 66, 143, 118, 66, 141, 157, 227, 174, 103, 138, 3, 92, 76, 28, 58, 38, 155, 117, 73, 63, 202, 46, 138, 212, 173, 0, 20, 89, 151, 63, 113, 136, 79, 150, 202, 120, 205, 192, 254, 134, 106, 66, 157, 208, 74, 89, 198, 212, 216, 224, 130, 226, 208, 49, 155, 18, 99, 37, 29, 197, 222, 234, 136, 199, 202, 149, 2, 185, 109, 148, 71, 197, 202, 226, 240, 67, 37, 135, 196, 241, 91, 8, 192, 57, 156, 31, 68, 170, 212, 83, 100, 198, 18, 71, 137, 213, 235, 105, 162, 29, 168, 117, 191, 215, 147, 201, 2, 223, 127, 160, 204, 163, 196, 57, 140, 227, 214, 80, 93, 92, 94, 28, 26, 138, 138, 140, 242, 89, 82, 75, 172, 234, 237, 17, 207, 251, 119, 203, 235, 214, 130, 230, 90, 130, 46, 14, 115, 70, 205, 128, 227, 155, 96, 71, 160, 221, 89, 235, 101, 94, 252, 152, 196, 26, 123, 255, 184, 250, 77, 47, 14, 187, 115, 208, 191, 157, 126, 26, 160, 194, 55, 103, 48, 210, 91, 208, 26, 235, 215, 12, 229, 174, 66, 156, 67, 180, 156, 67, 9, 252, 91, 126, 81, 153, 135, 253, 144, 156, 100, 23, 224, 138, 106, 209, 176, 116, 92, 16, 113, 252, 107, 206, 168, 1, 12, 204, 57, 28, 40, 74, 139, 138, 201, 8, 85, 134, 167, 229, 195, 118, 81, 3, 209, 113, 196, 195, 250, 39, 70, 187, 91, 215, 242, 89, 26, 231, 51, 255, 167, 104, 40, 249, 120, 121, 252, 108, 137, 35, 112, 231, 112, 96, 220, 209, 6, 19, 229, 244, 141, 40, 200, 255, 245, 185, 138, 169, 248, 224, 18, 191, 69, 75, 28, 33, 112, 14, 7, 216, 234, 96, 173, 229, 179, 27, 70, 236, 253, 227, 227, 236, 42, 194, 123, 26, 113, 160, 109, 197, 120, 89, 145, 225, 3, 8, 164, 110, 64, 198, 90, 73, 105, 173, 0, 156, 225, 253, 36, 86, 255, 124, 112, 220, 223, 208, 150, 57, 148, 176, 56, 135, 3, 86, 225, 123, 3, 4, 224, 227, 84, 128, 95, 62, 50, 200, 57, 204, 155, 195, 204, 17, 223, 215, 114, 110, 104, 198, 74, 90, 26, 176, 255, 193, 115, 143, 213, 39, 31, 78, 231, 40, 135, 83, 28, 58, 170, 155, 181, 149, 207, 100, 143, 205, 17, 127, 126, 250, 242, 248, 199, 114, 14, 24, 94, 113, 104, 96, 135, 131, 138, 209, 81, 20, 133, 169, 39, 99, 245, 195, 7, 202, 28, 140, 21, 72, 195, 45, 14, 13, 102, 62, 35, 91, 205, 202, 3, 35, 239, 159, 189, 178, 145, 225, 238, 101, 251, 182, 18, 114, 113, 232, 208, 230, 155, 164, 127, 6, 132, 248, 95, 174, 127, 66, 207, 250, 64, 226, 176, 57, 71, 227, 136, 175, 1, 187, 48, 198, 157, 186, 209, 81, 4, 61, 213, 213, 88, 189, 138, 195, 230, 28, 32, 244, 206, 225, 64, 81, 107, 195, 147, 147, 253, 162, 240, 199, 165, 21, 240, 213, 163, 56, 128, 229, 28, 249, 110, 248, 157, 195, 129, 226, 112, 160, 61, 41, 131, 123, 172, 189, 197, 65, 27, 241, 176, 225, 218, 111, 241, 196, 65, 24, 3, 169, 43, 106, 75, 98, 35, 164, 240, 21, 225, 195, 129, 197, 238, 206, 7, 199, 125, 180, 2, 41, 228, 151, 244, 13, 219, 32, 161, 205, 55, 73, 71, 17, 8, 130, 178, 247, 67, 176, 46, 27, 140, 253, 41, 155, 163, 190, 64, 48, 104, 176, 147, 129, 153, 207, 24, 225, 195, 190, 86, 128, 11, 31, 142, 109, 5, 182, 186, 87, 179, 173, 236, 0, 107, 24, 107, 30, 55, 71, 242, 123, 14, 160, 29, 22, 199, 99, 58, 220, 165, 172, 63, 212, 164, 117, 69, 183, 17, 180, 213, 236, 110, 5, 28, 48, 16, 142, 91, 217, 196, 177, 235, 69, 138, 171, 131, 54, 223, 52, 18, 235, 116, 71, 215, 121, 47, 31, 25, 238, 83, 195, 38, 142, 235, 117, 14, 39, 180, 249, 38, 233, 40, 2, 33, 189, 220, 90, 52, 251, 18, 42, 233, 144, 222, 88, 226, 184, 102, 231, 112, 162, 58, 173, 104, 111, 99, 164, 209, 86, 35, 110, 157, 236, 221, 35, 142, 123, 96, 206, 86, 162, 35, 14, 13, 69, 73, 254, 166, 119, 20, 145, 177, 126, 126, 245, 160, 194, 174, 5, 195, 101, 86, 142, 109, 37, 2, 206, 225, 192, 72, 155, 111, 106, 173, 128, 222, 194, 145, 225, 183, 23, 12, 114, 142, 188, 45, 144, 46, 34, 37, 14, 29, 237, 238, 218, 40, 243, 226, 130, 176, 178, 27, 235, 150, 56, 172, 215, 74, 174, 56, 144, 186, 98, 210, 169, 27, 79, 236, 160, 196, 186, 180, 252, 241, 253, 43, 113, 88, 143, 96, 225, 106, 101, 235, 21, 172, 200, 0, 149, 121, 36, 177, 226, 91, 53, 64, 200, 154, 173, 0, 214, 41, 142, 85, 63, 42, 129, 212, 21, 122, 255, 140, 180, 2, 108, 87, 38, 28, 206, 97, 47, 101, 229, 40, 58, 135, 3, 181, 110, 189, 164, 79, 124, 145, 177, 254, 171, 25, 171, 185, 96, 184, 231, 47, 182, 169, 108, 100, 157, 195, 129, 246, 70, 59, 145, 71, 90, 1, 162, 150, 88, 45, 113, 216, 156, 99, 247, 19, 105, 209, 131, 62, 223, 212, 123, 172, 253, 143, 95, 117, 129, 56, 197, 17, 113, 231, 112, 192, 152, 111, 106, 173, 128, 31, 82, 49, 70, 196, 241, 195, 238, 28, 251, 158, 72, 139, 38, 80, 153, 103, 24, 43, 3, 123, 31, 170, 239, 95, 172, 167, 108, 34, 25, 72, 93, 209, 38, 198, 106, 180, 2, 62, 223, 153, 143, 96, 225, 111, 127, 167, 190, 171, 119, 205, 152, 108, 204, 124, 198, 136, 111, 212, 57, 28, 64, 54, 162, 245, 207, 108, 247, 183, 1, 244, 242, 10, 86, 84, 97, 230, 51, 253, 16, 59, 3, 26, 111, 207, 57, 28, 208, 207, 159, 229, 10, 89, 134, 156, 154, 124, 195, 226, 208, 49, 214, 14, 142, 20, 110, 168, 159, 43, 137, 24, 216, 25, 206, 103, 165, 244, 255, 197, 97, 128, 149, 230, 149, 74, 249, 173, 110, 43, 187, 48, 90, 14, 66, 39, 142, 255, 1, 22, 42, 4, 7, 105, 141, 71, 171, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 },
                            Name = "images.png"
                        });
                });

            modelBuilder.Entity("Bookstore.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckoutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ClientId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Bookstore.Entities.Book", b =>
                {
                    b.HasOne("Bookstore.Entities.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Bookstore.Entities.BookAuthor", b =>
                {
                    b.HasOne("Bookstore.Entities.Authors", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore.Entities.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Bookstore.Entities.Client", b =>
                {
                    b.HasOne("Bookstore.Entities.Credentials", "Credentials")
                        .WithOne("Client")
                        .HasForeignKey("Bookstore.Entities.Client", "CredentialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("Bookstore.Entities.Comment", b =>
                {
                    b.HasOne("Bookstore.Entities.Book", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore.Entities.Client", "Client")
                        .WithMany("Comments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Bookstore.Entities.Order", b =>
                {
                    b.HasOne("Bookstore.Entities.Client", "Clients")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Bookstore.Entities.OrderBook", b =>
                {
                    b.HasOne("Bookstore.Entities.Book", "Book")
                        .WithMany("OrderBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore.Entities.Order", "Order")
                        .WithMany("OrderBooks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Bookstore.Entities.Photo", b =>
                {
                    b.HasOne("Bookstore.Entities.Book", "Book")
                        .WithOne("CoverPhoto")
                        .HasForeignKey("Bookstore.Entities.Photo", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Bookstore.Entities.Reservation", b =>
                {
                    b.HasOne("Bookstore.Entities.Book", "Book")
                        .WithMany("Reservations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore.Entities.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Bookstore.Entities.Authors", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("Bookstore.Entities.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("Comments");

                    b.Navigation("CoverPhoto");

                    b.Navigation("OrderBooks");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Bookstore.Entities.Client", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Bookstore.Entities.Credentials", b =>
                {
                    b.Navigation("Client");
                });

            modelBuilder.Entity("Bookstore.Entities.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Bookstore.Entities.Order", b =>
                {
                    b.Navigation("OrderBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
